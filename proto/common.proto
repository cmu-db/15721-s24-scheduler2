syntax = "proto3";

package composable_database;

// Common message types and enums here

message TaskID {
    uint64 query_id = 1;
    uint64 task = 2;
}

enum QueryStatus {
    DONE = 0;
    IN_PROGRESS = 1;
    FAILED = 2;
    NOT_FOUND = 3;
}

// Task execution and status messages

message TaskDone {
    uint64 result_size = 1;
}

message TaskStatusIncomplete {
    enum StatusType {
        FAILED = 0;
        PREFETCH = 1;
    }
    StatusType status_type = 1;
}

message NotifyTaskStateArgs {
    uint64 task_id = 1;
    oneof state {
        TaskDone result = 2;
        TaskStatusIncomplete code = 3;
    }
}

message NewTaskPlan {
    bytes physical_plan = 1;
    oneof exchange_instruction {
        // Definitions for scatter, gather, discard results
        int32 scatter = 2;
        string gather = 3;
    }
}

message NotifyTaskStateRet {
    oneof response {
        NewTaskPlan plan = 1;
        // Wait or other instructions
    }
}

// Definitions specific to Optimizer and Scheduler interaction

message QueryInfo {
    int32 priority = 1;
    int32 cost = 2;
    // Additional fields here
}

message ScheduleQueryArgs {
    bytes physical_plan = 1;
    QueryInfo metadata = 2;
}

message ScheduleQueryRet {
    uint64 query_id = 1;
}

message QueryJobStatusArgs {
    uint64 query_id = 1;
}

message QueryJobStatusRet {
    QueryStatus query_status = 1;
}

message AbortQueryArgs {
    uint64 query_id = 1;
}

message AbortQueryRet {
    bool aborted = 1;
}

service Scheduler {
    // OPTIMIZER
    rpc ScheduleQuery(ScheduleQueryArgs) returns (ScheduleQueryRet);
    rpc QueryJobStatus(QueryJobStatusArgs) returns (QueryJobStatusRet);
    rpc AbortQuery(AbortQueryArgs) returns (AbortQueryRet);

    // EXECUTOR
    rpc NotifyTaskState(NotifyTaskStateArgs) returns (NotifyTaskStateRet);
}


// Other common definitions
