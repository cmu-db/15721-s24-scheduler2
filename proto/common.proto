syntax = "proto3";

package composable_database;

// Common message types and enums

// A task is identified by its query id and task id
message TaskID {
    uint64 query_id = 1;
    uint64 task_id = 2;
    uint64 stage_id = 3;
}

enum QueryStatus {
    DONE = 0;
    IN_PROGRESS = 1;
    FAILED = 2;
    NOT_FOUND = 3;
}

// Task execution and status messages
message NotifyTaskStateArgs {
    TaskID task = 1;
    bool success = 2; // if the query succeeded
    bytes result = 3; // bytes for the result
}

message NotifyTaskStateRet {
    bool has_new_task = 1; // true if there is a new task (details given below)
    TaskID task = 2;
    bytes physical_plan = 3;
}

// Definitions specific to Optimizer and Scheduler interaction

message QueryInfo {
    int32 priority = 1;
    int32 cost = 2;
}

message ScheduleQueryArgs {
    bytes physical_plan = 1;
    QueryInfo metadata = 2;
}

message ScheduleQueryRet {
    uint64 query_id = 1;
}

message QueryJobStatusArgs {
    uint64 query_id = 1;
}

message QueryJobStatusRet {
    QueryStatus query_status = 1;
    bytes query_result = 2;
}

message AbortQueryArgs {
    uint64 query_id = 1;
}

message AbortQueryRet {
    bool aborted = 1;
}

service SchedulerAPI {
    // OPTIMIZER
    rpc ScheduleQuery(ScheduleQueryArgs) returns (ScheduleQueryRet);
    rpc QueryJobStatus(QueryJobStatusArgs) returns (QueryJobStatusRet);
    rpc AbortQuery(AbortQueryArgs) returns (AbortQueryRet);

    // EXECUTOR
    rpc NotifyTaskState(NotifyTaskStateArgs) returns (NotifyTaskStateRet);
}
